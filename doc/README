cpuload
~~~~~~~
Generates specified load (per second approximation) according to specified
 value.  Exact CPU load depends from a number of conditions but measured
 difference is between 5 to 9%:
- requested 10% - generated 5-7
- requested 90% - generated 81-89.
If you specify 0 as a parameter that random load will be generated (33-99%).

Optional -p parameter will make cpuload to attempt to raise its priority
(needs to be run as root).

Example:
  cpuload 0 


memload
~~~~~~~~
Occupies specified amount of memory. Several instances can be used to adjust
system memory consumption.

Example:
   memload 32 &


ioload
~~~~~~
Deprecated, try `spew' instead.


run_secs
~~~~~~~~
A convenience wrapper script for running any of the *load tools for a specified
length of time and then exiting.

Example:
   run_secs 20 memload 32


flash_eater
~~~~~~~~~~~
A convenience script that allocates disk space on the root filesystem so that
only a given amount of MBs will be left. Please note that the amount of 
resulting free space can sometimes be a bit off because of the
combined effects of large target space specification granularity and
filesystem compression (if in use).

Example:

   flash-eater 13


swpload
~~~~~~~
Swpload is a small tool that can be used to stress the virtual memory
subsystem. It launches a given number of clients, each of which will allocate a
given amount of memory. The clients will read and modify the allocated memory
to exercise the virtual memory subsystem.

Please note that when this tool is run with superuser privileges, the system
stability can be compromised.

Example:
   To  simulate  10  applications  running in a random order for 15 seconds,
   going through all of their allocated memory page by page (the real-world
   equivalent could be running several instances of an image-processing
   application in parallel, handling 10 megapixel truecolor images):

       swpload 10 30 15 RL
